import dask.dataframe as dd
import pandas as pd
import numpy as np
from prettytable import PrettyTable
import datetime

# Generate sample data for 20 columns and 1000 rows
num_rows = 100
num_cols_df1 = 8
num_cols_df2 = 6

# Ensure some overlap and differences in the data
common_ids = int(num_rows * 0.7)
only_in_df1_ids = num_rows - common_ids
only_in_df2_ids = num_rows - common_ids

# Create common data for both dataframes
common_data1 = {
    f'col{i}': np.random.choice(['A', 'B', 'C', 'D'], common_ids) for i in range(num_cols_df1)
}
common_data2 = {
    f'col{i}': np.random.choice(['A', 'B', 'C', 'E'], common_ids) for i in range(num_cols_df2)
}
common_data1['id'] = range(common_ids)
common_data2['id'] = range(common_ids)

# Create data only in df1
data1_only = {
    f'col{i}': np.random.choice(['A', 'D'], only_in_df1_ids) for i in range(num_cols_df1)
}
data1_only['id'] = range(common_ids, common_ids + only_in_df1_ids)

# Create data only in df2
data2_only = {
    f'col{i}': np.random.choice(['A', 'G', 'E'], only_in_df2_ids) for i in range(num_cols_df2)
}
data2_only['id'] = range(common_ids, common_ids + only_in_df2_ids)

# Combine data to create final dataframes
data1 = {key: np.concatenate([common_data1[key], data1_only[key]]) for key in common_data1}
data2 = {key: np.concatenate([common_data2[key], data2_only[key]]) for key in common_data2}

# Create pandas dataframes
df1 = pd.DataFrame(data1)
df2 = pd.DataFrame(data2)

# Introduce some mismatched values in common columns
mismatch_indices = np.random.choice(common_ids, size=int(common_ids * 0.1), replace=False)
for col in df1.columns:
    if col in df2.columns and col != 'id':
        df2.loc[mismatch_indices, col] = df2[col].apply(lambda x: 'X' if x != 'X' else 'Y')

# Convert pandas dataframes to Dask dataframes
ddf1 = dd.from_pandas(df1, npartitions=10)
ddf2 = dd.from_pandas(df2, npartitions=10)

# Update 'id' to 101 where 'id' is 1
ddf1 = ddf1.assign(id=ddf1['id'].mask(ddf1['id'] == 1, 101))

# Display the first few rows of each dataframe
# print("DataFrame 1:")
# print(df1.head())
# print("\nDataFrame 2:")
# print(df2.head())



def compare_dataframes(ddf1, ddf2, join_columns):
    # Perform a join on the specified columns
    merged = ddf1.merge(ddf2, on=join_columns, suffixes=('_df1', '_df2'), how='outer', indicator=True)

    # Compute the merged dataframe
    merged = merged.compute()

    # Identify differences
    only_in_df1 = merged[merged['_merge'] == 'left_only']
    only_in_df2 = merged[merged['_merge'] == 'right_only']
    both = merged[merged['_merge'] == 'both']

    differences = {}
    differences['only_in_df1'] = only_in_df1
    differences['only_in_df2'] = only_in_df2

    # Compare column values for rows that exist in both dataframes
    mismatched_rows = both[both.filter(like='_df1').astype(str).ne(both.filter(like='_df2').astype(str)).any(axis=1)]

    differences['mismatched_rows'] = mismatched_rows

    return differences


def generate_report(df1, df2, differences, join_column, sample_rows=None, mismatch_sample=None):
    report = []

    def add_section(title, table):
        report.append(title)
        report.append(table.get_string())
        report.append(f"{'=='*60}\n")

    # Summary and disclaimer
    report.append("Comparison Report Detailed Summary")
    report.append(f"Generated on: {datetime.datetime.now()}")
    report.append(f"Total rows in DataFrame 1: {len(df1)}")
    report.append(f"Total rows in DataFrame 2: {len(df2)}")
    report.append(f"Total columns in DataFrame 1: {len(df1.columns.values.tolist())}")
    report.append(f"Total columns in DataFrame 2: {len(df2.columns.values.tolist())}")
    report.append(f"Rows with mismatches: {len(differences['mismatched_rows'])}")
    report.append(f"Columns with mismatches: {len(differences['mismatched_rows'].columns) // 2}")
    report.append("\nDisclaimer: This report is generated based on the provided data and may not capture all edge cases or subtle differences between the DataFrames.\nIt is recommended to review the original source data for a comprehensive comparison.\n\n")

    # DataFrame information
    info_table = PrettyTable()
    info_table.field_names = ["DataFrame 1 Column", "DataFrame 1 Type", "DataFrame 2 Column", "DataFrame 2 Type"]
    
    df1_cols = df1.dtypes.reset_index()
    df2_cols = df2.dtypes.reset_index()
    
    max_len = max(len(df1_cols), len(df2_cols))
    
    for i in range(max_len):
        row = []
        if i < len(df1_cols):
            row.extend([df1_cols.iloc[i, 0], df1_cols.iloc[i, 1]])
        else:
            row.extend(["", ""])
        
        if i < len(df2_cols):
            row.extend([df2_cols.iloc[i, 0], df2_cols.iloc[i, 1]])
        else:
            row.extend(["", ""])
        
        info_table.add_row(row)
    
    add_section("DataFrame Information", info_table)

    # Columns in df1 but not in df2
    only_in_df1_cols = set(df1.columns) - set(df2.columns)
    only_in_df1_cols_table = PrettyTable()
    only_in_df1_cols_table.field_names = ["Columns in DataFrame 1 but not in DataFrame 2"]
    for col in only_in_df1_cols:
        only_in_df1_cols_table.add_row([col])
    add_section("Columns Mismatch Summary", only_in_df1_cols_table)

    # Columns in df2 but not in df1
    only_in_df2_cols = set(df2.columns) - set(df1.columns)
    only_in_df2_cols_table = PrettyTable()
    only_in_df2_cols_table.field_names = ["Columns in DataFrame 2 but not in DataFrame 1"]
    for col in only_in_df2_cols:
        only_in_df2_cols_table.add_row([col])
    add_section("Columns Mismatch Summary", only_in_df2_cols_table)

    # DataFrame summary
    summary_table = PrettyTable()
    summary_table.field_names = ["DataFrame", "Rows", "Columns"]
    summary_table.add_row(["DataFrame 1", len(df1), len(df1.columns)])
    summary_table.add_row(["DataFrame 2", len(df2), len(df2.columns)])
    add_section("DataFrame Summary", summary_table)
    
    # Rows only in df1
    only_in_df1_table = PrettyTable()
    only_in_df1_table.field_names = differences['only_in_df1'].columns 
    for row in differences['only_in_df1'].itertuples(index=False):
        only_in_df1_table.add_row(row)
    add_section("Rows only in DataFrame 1", only_in_df1_table)

    # Rows only in df2
    only_in_df2_table = PrettyTable()
    only_in_df2_table.field_names = differences['only_in_df2'].columns 
    for row in differences['only_in_df2'].itertuples(index=False):
        only_in_df2_table.add_row(row)
    add_section("Rows only in DataFrame 2", only_in_df2_table)
    
    # Mismatched rows column-wise
    mismatched = differences['mismatched_rows']

    for col in mismatched.filter(like='_df1').columns:
        col_name = col.replace('_df1', '')
        mismatch_table = PrettyTable()
        mismatch_table.field_names = [join_column, "Column", "DataFrame 1", "DataFrame 2"]
        mismatch_rows = 0
        
        for index, row in mismatched.iterrows():
            val1 = row[col]
            val2 = row[col.replace('_df1', '_df2')]
            if val1 != val2:
                mismatch_table.add_row([row[join_column], col_name, val1, val2])
                mismatch_rows += 1
                if mismatch_sample and mismatch_rows >= mismatch_sample:
                    break
        add_section(f"Column {col_name} Mismatches", mismatch_table)

    # Sample mismatched rows
    sample_table_df1 = PrettyTable()
    sample_table_df2 = PrettyTable()

    # Include only common columns in sample_table_df2
    common_cols = [col for col in df1.columns if col in df2.columns and col != join_column]
    sample_table_df1.field_names = [join_column] + [f"DataFrame 1 ({col})" for col in common_cols]
    sample_table_df2.field_names = [join_column] + [f"DataFrame 2 ({col})" for col in common_cols]

    if sample_rows:
        sample_mismatched = mismatched.head(sample_rows)
    else:
        sample_mismatched = mismatched

    for row in sample_mismatched.itertuples(index=False, name=None):
        # Create a dictionary of the row values for easier access
        row_dict = {col: row[i] for i, col in enumerate(mismatched.columns)}
        row_df1 = [row_dict[join_column]] + [row_dict[f"{col}_df1"] for col in common_cols]
        row_df2 = [row_dict[join_column]] + [row_dict[f"{col}_df2"] for col in common_cols]
        
        sample_table_df1.add_row(row_df1)
        sample_table_df2.add_row(row_df2)
    
    add_section("Sample Mismatched Rows from DataFrame 1", sample_table_df1)
    add_section("Sample Mismatched Rows from DataFrame 2", sample_table_df2)

    return "\n".join(report)

# Perform comparison
differences = compare_dataframes(ddf1, ddf2, ['id'])

# Generate report with sample rows and mismatched row limits
report = generate_report(df1, df2, differences, join_column='id', sample_rows=10, mismatch_sample=5)


print(report)


with open("report.txt", "w") as f:
    f.write(report)
