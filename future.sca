import java.util.concurrent.{Executors, TimeUnit}
import scala.concurrent.{ExecutionContext, Future, blocking}
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

val notebookContext = dbutils.notebook.getContext()
val numberOfThreads = 5
val threadPool = Executors.newFixedThreadPool(numberOfThreads)
implicit val executionContext: ExecutionContext = ExecutionContext.fromExecutor(threadPool)

val parametersList: List[Map[String, String]] = List(
  arguments, arguments, arguments, arguments, arguments
)

def runNotebook(params: Map[String, String]): Future[String] = Future {
  dbutils.notebook.setContext(notebookContext)
  Try {
    dbutils.notebook.run("./ODS_Ingestion/Level_0_1", 60, params)
  } match {
    case Success(result) => result
    case Failure(ex) =>
      println(s"An error occurred: ${ex.getMessage}")
      "Error"
  }
}

def runWithRetry(params: Map[String, String], retries: Int = 3): Future[String] = {
  runNotebook(params).recoverWith {
    case _ if retries > 0 =>
      println(s"Retrying... attempts remaining: $retries")
      runWithRetry(params, retries - 1)
  }
}

val futures: List[Future[String]] = parametersList.map { params =>
  runWithRetry(params)
}

val allResults: Future[List[String]] = Future.sequence(futures)

allResults.onComplete {
  case Success(results) =>
    println("All tasks completed successfully")
    results.foreach(println)
  case Failure(ex) =>
    println(s"One or more tasks failed with error: ${ex.getMessage}")
}

try {
  blocking {
    Await.result(allResults, Duration.Inf)
  }
} finally {
  threadPool.shutdown()
  if (!threadPool.awaitTermination(1, TimeUnit.MINUTES)) {
    threadPool.shutdownNow()
  }
}





//////



import scala.concurrent.{ExecutionContext, Future, blocking}
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}
import scala.util.Random

def retryWithBackoff[T](
    block: => Future[T],
    maxRetries: Int,
    initialDelay: FiniteDuration,
    maxDelay: FiniteDuration,
    jitter: Double = 0.2,
    maxTotalDuration: FiniteDuration
)(implicit ec: ExecutionContext): Future[T] = {

  def exponentialBackoff(attempt: Int): FiniteDuration = {
    val delay = initialDelay * math.pow(2, attempt).min(maxDelay.toMillis).toLong
    val jitteredDelay = delay * (1 + (Random.nextDouble() * jitter))
    FiniteDuration(jitteredDelay.toLong, MILLISECONDS)
  }

  def retry(attempt: Int, totalTime: FiniteDuration): Future[T] = {
    block.recoverWith {
      case ex if attempt < maxRetries && totalTime < maxTotalDuration =>
        val delay = exponentialBackoff(attempt)
        val newTotalTime = totalTime + delay

        println(s"Retrying in ${delay.toMillis} ms (Attempt: $attempt, Total Time: ${newTotalTime.toMillis} ms, Error: ${ex.getMessage})")

        blocking(Thread.sleep(delay.toMillis)) // Delay before retry
        retry(attempt + 1, newTotalTime)
    }
  }

  retry(0, Duration.Zero)
}

// Usage Example
val notebookContext = dbutils.notebook.getContext()
val params = Map("param1" -> "value1")

def runNotebook(params: Map[String, String]): Future[String] = Future {
  dbutils.notebook.setContext(notebookContext)
  dbutils.notebook.run("./ODS_Ingestion/Level_0_1", 60, params)
}

implicit val executionContext: ExecutionContext = ExecutionContext.global

val result = retryWithBackoff(
  block = runNotebook(params),
  maxRetries = 5,
  initialDelay = 1.second,
  maxDelay = 1.minute,
  maxTotalDuration = 10.minutes
)

result.onComplete {
  case Success(res) => println(s"Notebook completed successfully: $res")
  case Failure(ex)  => println(s"Notebook failed after retries: ${ex.getMessage}")
}