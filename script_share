import re
import pandas as pd

def find_table_operations(tsql_script, table_name):
    # List to hold data for the DataFrame
    data = []

    # Create a dynamic regex pattern for table names with optional schema and brackets
    table_pattern = r"(\[?([a-zA-Z_][\w]*)\]?\.?)?\[?({})\]?"

    # Regex pattern for SQL operations
    operations = r'\b(INSERT INTO|DELETE FROM|TRUNCATE TABLE|UPDATE|JOIN|FROM|INTO|SELECT)\b'

    # Combine table name pattern and operations pattern
    pattern = re.compile(operations + r'\s+' + table_pattern.format(re.escape(table_name)), re.IGNORECASE)
    
    for match in pattern.finditer(tsql_script):
        operation = match.group(1).upper()
        surrounding_text = get_surrounding_text(tsql_script, match.start(), match.end(), 50)
        data.append({
            'search_term': table_name,
            'occurrence': len(data) + 1,  # Incremental occurrence number
            'sql_keyword': operation,
            'surrounding_text': surrounding_text
        })

    return pd.DataFrame(data)

def get_surrounding_text(text, start, end, word_count):
    words = re.findall(r'\S+', text)
    # Find the positions of the words around the start and end indices
    start_idx = max(0, start - word_count)
    end_idx = min(len(words), end + word_count)
    surrounding_words = words[start_idx:end_idx]
    return ' '.join(surrounding_words)

# Example usage
tsql_script = """
CREATE PROCEDURE SampleProcedure
AS
BEGIN
    INSERT INTO dbo.MyTable (Column1, Column2)
    SELECT Column1, Column2
    FROM AnotherTable
    JOIN dbo.MyTable ON AnotherTable.ID = dbo.MyTable.ID
    DELETE FROM [dbo].[MyTable]
    UPDATE MyTable
    SET Column1 = 'NewValue'
    WHERE Column2 = 'SomeValue'
    TRUNCATE TABLE [dbo].MyTable
    SELECT * FROM dbo.AnotherTable
END
"""

table_name = 'MyTable'

results = find_table_operations(tsql_script, table_name)
print(results)



**************************************************************************************************************************************************************



import re
import pandas as pd

def find_table_operations(tsql_script, table_name):
    # List to hold data for the DataFrame
    data = []

    # Create a dynamic regex pattern for table names with optional schema and brackets
    table_pattern = r"(\[?([a-zA-Z_][\w]*)\]?\.?)?\[?({})\]?"

    # Regex pattern for SQL operations
    operations = r'\b(INSERT INTO|DELETE FROM|TRUNCATE TABLE|UPDATE|JOIN|FROM|INTO|SELECT)\b'

    # Combine table name pattern and operations pattern
    pattern = re.compile(operations + r'\s+' + table_pattern.format(re.escape(table_name)), re.IGNORECASE)
    
    for match in pattern.finditer(tsql_script):
        operation = match.group(1).upper()
        start = match.start()
        end = match.end()
        surrounding_text = get_surrounding_text(tsql_script, start, end, 50)
        data.append({
            'search_term': table_name,
            'occurrence': len(data) + 1,  # Incremental occurrence number
            'sql_keyword': operation,
            'surrounding_text': surrounding_text
        })

    return pd.DataFrame(data)

def get_surrounding_text(text, start, end, word_count):
    # Find the positions of the words around the start and end indices
    start_idx = max(0, start - word_count)
    end_idx = min(len(text), end + word_count)
    surrounding_text = text[start_idx:end_idx]
    return surrounding_text

# Example usage
tsql_script = """
CREATE PROCEDURE SampleProcedure
AS
BEGIN
    INSERT INTO dbo.MyTable (Column1, Column2)
    SELECT Column1, Column2
    FROM AnotherTable
    JOIN dbo.MyTable ON AnotherTable.ID = dbo.MyTable.ID
    DELETE FROM [dbo].[MyTable]
    UPDATE MyTable
    SET Column1 = 'NewValue'
    WHERE Column2 = 'SomeValue'
    TRUNCATE TABLE [dbo].MyTable
    SELECT * FROM dbo.AnotherTable
END
"""

table_name = 'MyTable'

results = find_table_operations(tsql_script, table_name)
print(results)



**************************************************************************************************************************************************************



import re
import pandas as pd

def find_table_operations(tsql_script, table_name):
    # List to hold data for the DataFrame
    data = []

    # Create a dynamic regex pattern for table names with optional schema and brackets
    table_pattern = r"(\[?([a-zA-Z_][\w]*)\]?\.?)?\[?({})\]?"

    # Regex pattern for SQL operations
    operations = r'\b(INSERT INTO|DELETE FROM|TRUNCATE TABLE|UPDATE|JOIN|FROM|INTO|SELECT)\b'

    # Combine table name pattern and operations pattern
    combined_pattern = operations + r'\s+' + table_pattern.format(re.escape(table_name)) + r'\b'
    pattern = re.compile(combined_pattern, re.IGNORECASE)
    
    for match in pattern.finditer(tsql_script):
        operation = match.group(1).upper()
        start = match.start()
        end = match.end()
        surrounding_text = get_surrounding_text(tsql_script, start, end, 50)
        data.append({
            'search_term': table_name,
            'occurrence': len(data) + 1,  # Incremental occurrence number
            'sql_keyword': operation,
            'surrounding_text': surrounding_text
        })

    return pd.DataFrame(data)

def get_surrounding_text(text, start, end, word_count):
    words = text.split()
    word_positions = []
    pos = 0
    for i, word in enumerate(words):
        start_idx = text.find(word, pos)
        end_idx = start_idx + len(word)
        word_positions.append((start_idx, end_idx))
        pos = end_idx

    start_word = max(0, next(i for i, pos in enumerate(word_positions) if pos[0] >= start) - word_count)
    end_word = min(len(words), next(i for i, pos in enumerate(word_positions) if pos[1] >= end) + word_count)

    surrounding_text = ' '.join(words[start_word:end_word])
    return surrounding_text

# Example usage
tsql_script = """
CREATE PROCEDURE SampleProcedure
AS
BEGIN
    INSERT INTO dbo.MyTable (Column1, Column2)
    SELECT Column1, Column2
    FROM AnotherTable
    JOIN dbo.newMyTable ON AnotherTable.ID = dbo.MyTable.ID
    DELETE FROM [dbo].[MyTable]
    UPDATE MyTable
    SET Column1 = 'NewValue'
    WHERE Column2 = 'SomeValue'
    TRUNCATE TABLE [dbo].MyTable
    SELECT * FROM dbo.AnotherTable
END
"""

table_name = 'MyTable'

results = find_table_operations(tsql_script, table_name)
print(results)



**************************************************************************************************************************************************************



import re
import pandas as pd

def find_table_operations(tsql_script, table_name):
    # List to hold data for the DataFrame
    data = []

    # Create a dynamic regex pattern for table names with optional schema and brackets
    # Adjusting the pattern to ensure it captures exact table names and accounts for schema and brackets
    table_pattern = r"(\[?[a-zA-Z_][\w]*\]?\.?)?\[?{}\]?".format(re.escape(table_name))

    # Regex pattern for SQL operations
    operations = r'\b(INSERT INTO|DELETE FROM|TRUNCATE TABLE|UPDATE|JOIN|FROM|INTO|SELECT)\b'

    # Combine table name pattern and operations pattern
    combined_pattern = operations + r'\s+' + table_pattern + r'\b'
    pattern = re.compile(combined_pattern, re.IGNORECASE)
    
    for match in pattern.finditer(tsql_script):
        operation = match.group(1).upper()
        start = match.start()
        end = match.end()
        surrounding_text = get_surrounding_text(tsql_script, start, end, 50)
        data.append({
            'search_term': table_name,
            'occurrence': len(data) + 1,  # Incremental occurrence number
            'sql_keyword': operation,
            'surrounding_text': surrounding_text
        })

    return pd.DataFrame(data)

def get_surrounding_text(text, start, end, word_count):
    # Tokenize the text into words
    words = text.split()
    word_positions = []
    pos = 0
    for i, word in enumerate(words):
        start_idx = text.find(word, pos)
        end_idx = start_idx + len(word)
        word_positions.append((start_idx, end_idx))
        pos = end_idx

    # Find the start and end word positions around the match
    start_word = max(0, next(i for i, pos in enumerate(word_positions) if pos[0] >= start) - word_count)
    end_word = min(len(words), next(i for i, pos in enumerate(word_positions) if pos[1] >= end) + word_count)

    surrounding_text = ' '.join(words[start_word:end_word])
    return surrounding_text

# Example usage
tsql_script = """
CREATE PROCEDURE SampleProcedure
AS
BEGIN
    INSERT INTO dbo.MyTable (Column1, Column2)
    SELECT Column1, Column2
    FROM AnotherTable
    JOIN dbo.newMyTable ON AnotherTable.ID = dbo.MyTable.ID
    DELETE FROM [dbo].[MyTable]
    UPDATE MyTable
    SET Column1 = 'NewValue'
    WHERE Column2 = 'SomeValue'
    TRUNCATE TABLE [dbo].MyTable
    SELECT * FROM dbo.AnotherTable
END
"""

table_name = 'MyTable'

results = find_table_operations(tsql_script, table_name)
print(results)



**************************************************************************************************************************************************************



import re
import pandas as pd

def find_table_operations(tsql_script, table_name):
    # Remove line comments and multi-line comments
    tsql_script = re.sub(r'--.*', '', tsql_script)  # Remove line comments
    tsql_script = re.sub(r'/\*.*?\*/', '', tsql_script, flags=re.DOTALL)  # Remove multi-line comments

    # List to hold data for the DataFrame
    data = []

    # Create a dynamic regex pattern for table names with optional schema and brackets
    table_pattern = r"(\[?[a-zA-Z_][\w]*\]?\.?)?\[?{}\]?".format(re.escape(table_name))

    # Regex pattern for SQL operations
    operations = r'\b(INSERT INTO|DELETE FROM|TRUNCATE TABLE|UPDATE|JOIN|FROM|INTO|SELECT)\b'

    # Combine table name pattern and operations pattern
    combined_pattern = operations + r'\s+' + table_pattern + r'(\s+AS\s+\w+|\s+\w+)?\b'
    pattern = re.compile(combined_pattern, re.IGNORECASE)

    # Find all table name aliases from "FROM" and "JOIN" clauses
    alias_pattern = re.compile(r'\bFROM\s+(\[?[a-zA-Z_][\w]*\]?\.?\[?{}\]?)(\s+AS\s+\w+|\s+\w+)?\b|JOIN\s+(\[?[a-zA-Z_][\w]*\]?\.?\[?{}\]?)(\s+AS\s+\w+|\s+\w+)?\b'.format(re.escape(table_name), re.escape(table_name)), re.IGNORECASE)
    aliases = {table_name.lower()}
    
    for alias_match in alias_pattern.finditer(tsql_script):
        if alias_match.group(2):  # Alias found after "AS" or space
            alias = alias_match.group(2).strip().split()[-1].lower()
            aliases.add(alias)

    # Check each match and handle alias cases
    for match in pattern.finditer(tsql_script):
        operation = match.group(1).upper()
        table_part = match.group(2)
        alias_part = match.group(3)
        table_full_name = (table_part + table_name).lower()

        # If the table part or alias part matches the table name or its alias, it's a valid match
        if table_full_name in aliases or (alias_part and alias_part.strip().lower() in aliases):
            start = match.start()
            end = match.end()
            surrounding_text = get_surrounding_text(tsql_script, start, end, 50)
            data.append({
                'search_term': table_name,
                'occurrence': len(data) + 1,  # Incremental occurrence number
                'sql_keyword': operation,
                'surrounding_text': surrounding_text
            })

    return pd.DataFrame(data)

def get_surrounding_text(text, start, end, word_count):
    words = text.split()
    word_positions = []
    pos = 0
    for i, word in enumerate(words):
        start_idx = text.find(word, pos)
        end_idx = start_idx + len(word)
        word_positions.append((start_idx, end_idx))
        pos = end_idx

    start_word = max(0, next(i for i, pos in enumerate(word_positions) if pos[0] >= start) - word_count)
    end_word = min(len(words), next(i for i, pos in enumerate(word_positions) if pos[1] >= end) + word_count)

    surrounding_text = ' '.join(words[start_word:end_word])
    return surrounding_text

# Example usage
tsql_script = """
CREATE PROCEDURE SampleProcedure
AS
BEGIN
    -- This is a comment line
    INSERT INTO dbo.MyTable (Column1, Column2)
    SELECT Column1, Column2
    FROM AnotherTable
    JOIN dbo.MyTable t ON AnotherTable.ID = t.ID
    DELETE FROM [dbo].[MyTable]
    UPDATE MyTable
    SET Column1 = 'NewValue'
    WHERE Column2 = 'SomeValue'
    TRUNCATE TABLE [dbo].MyTable
    SELECT * FROM dbo.AnotherTable
    UPDATE t SET t.ID = '1' FROM MyTable t
END
"""

table_name = 'MyTable'

results = find_table_operations(tsql_script, table_name)
print(results)



**************************************************************************************************************************************************************



import re
import pandas as pd

def find_table_operations(tsql_script, table_name):
    # Remove line comments and multi-line comments
    tsql_script = re.sub(r'--.*', '', tsql_script)  # Remove line comments
    tsql_script = re.sub(r'/\*.*?\*/', '', tsql_script, flags=re.DOTALL)  # Remove multi-line comments

    # List to hold data for the DataFrame
    data = []

    # Create a dynamic regex pattern for table names with optional schema and brackets
    table_pattern = r"(\[?[a-zA-Z_][\w]*\]?\.?)?\[?{}\]?".format(re.escape(table_name))

    # Regex pattern for SQL operations
    operations = r'\b(INSERT INTO|DELETE FROM|TRUNCATE TABLE|UPDATE|JOIN|FROM|INTO|SELECT)\b'

    # Combine table name pattern and operations pattern
    combined_pattern = operations + r'\s+' + table_pattern + r'(\s+AS\s+\w+|\s+\w+)?\b'
    pattern = re.compile(combined_pattern, re.IGNORECASE)

    # Find all table name aliases from "FROM" and "JOIN" clauses
    alias_pattern = re.compile(r'\bFROM\s+(\[?[a-zA-Z_][\w]*\]?\.?\[?{}\]?)(\s+AS\s+\w+|\s+\w+)?\b|JOIN\s+(\[?[a-zA-Z_][\w]*\]?\.?\[?{}\]?)(\s+AS\s+\w+|\s+\w+)?\b'.format(re.escape(table_name), re.escape(table_name)), re.IGNORECASE)
    aliases = {table_name.lower()}

    for alias_match in alias_pattern.finditer(tsql_script):
        if alias_match.group(2):  # Alias found after "AS" or space
            alias = alias_match.group(2).strip().split()[-1].lower()
            aliases.add(alias)
        elif alias_match.group(4):  # Alias found after "AS" or space in JOIN
            alias = alias_match.group(4).strip().split()[-1].lower()
            aliases.add(alias)

    # Check each match and handle alias cases
    for match in pattern.finditer(tsql_script):
        operation = match.group(1).upper()
        table_part = match.group(2)
        alias_part = match.group(3)
        table_full_name = (table_part + table_name).lower()

        # If the table part or alias part matches the table name or its alias, it's a valid match
        if table_full_name in aliases or (alias_part and alias_part.strip().lower() in aliases):
            start = match.start()
            end = match.end()
            surrounding_text = get_surrounding_text(tsql_script, start, end, 50)
            data.append({
                'search_term': table_name,
                'occurrence': len(data) + 1,  # Incremental occurrence number
                'sql_keyword': operation,
                'surrounding_text': surrounding_text
            })

    return pd.DataFrame(data)

def get_surrounding_text(text, start, end, word_count):
    words = text.split()
    word_positions = []
    pos = 0
    for i, word in enumerate(words):
        start_idx = text.find(word, pos)
        end_idx = start_idx + len(word)
        word_positions.append((start_idx, end_idx))
        pos = end_idx

    start_word = max(0, next(i for i, pos in enumerate(word_positions) if pos[0] >= start) - word_count)
    end_word = min(len(words), next(i for i, pos in enumerate(word_positions) if pos[1] >= end) + word_count)

    surrounding_text = ' '.join(words[start_word:end_word])
    return surrounding_text

# Example usage
tsql_script = """
CREATE PROCEDURE SampleProcedure
AS
BEGIN
    -- This is a comment line
    INSERT INTO dbo.MyTable (Column1, Column2)
    SELECT Column1, Column2
    FROM AnotherTable
    JOIN dbo.MyTable t ON AnotherTable.ID = t.ID
    DELETE FROM [dbo].[MyTable]
    UPDATE MyTable
    SET Column1 = 'NewValue'
    WHERE Column2 = 'SomeValue'
    TRUNCATE TABLE [dbo].MyTable
    SELECT * FROM dbo.AnotherTable
    UPDATE t SET t.ID = '1' FROM MyTable t
END
"""

table_name = 'MyTable'

results = find_table_operations(tsql_script, table_name)
print(results)



**************************************************************************************************************************************************************




import re
import pandas as pd

def find_table_operations(tsql_script, table_name):
    # Remove line comments and multi-line comments
    tsql_script = re.sub(r'--.*', '', tsql_script)  # Remove line comments
    tsql_script = re.sub(r'/\*.*?\*/', '', tsql_script, flags=re.DOTALL)  # Remove multi-line comments

    # List to hold data for the DataFrame
    data = []

    # Create a dynamic regex pattern for table names with optional schema and brackets
    table_pattern = r"(\[?[a-zA-Z_][\w]*\]?\.?)?\[?{}\]?".format(re.escape(table_name))

    # Regex pattern for SQL operations
    operations = r'\b(INSERT INTO|DELETE FROM|TRUNCATE TABLE|UPDATE|JOIN|FROM|INTO|SELECT)\b'

    # Combine table name pattern and operations pattern
    combined_pattern = operations + r'\s+' + table_pattern + r'(\s+AS\s+\w+|\s+\w+)?\b'
    pattern = re.compile(combined_pattern, re.IGNORECASE)

    # Find all table name aliases from "FROM" and "JOIN" clauses
    alias_pattern = re.compile(r'\bFROM\s+(\[?[a-zA-Z_][\w]*\]?\.?\[?{}\]?)(\s+AS\s+\w+|\s+\w+)?\b|JOIN\s+(\[?[a-zA-Z_][\w]*\]?\.?\[?{}\]?)(\s+AS\s+\w+|\s+\w+)?\b'.format(re.escape(table_name), re.escape(table_name)), re.IGNORECASE)
    aliases = {table_name.lower()}

    for alias_match in alias_pattern.finditer(tsql_script):
        if alias_match.group(2):  # Alias found after "AS" or space
            alias = alias_match.group(2).strip().split()[-1].lower()
            aliases.add(alias)
        elif alias_match.group(4):  # Alias found after "AS" or space in JOIN
            alias = alias_match.group(4).strip().split()[-1].lower()
            aliases.add(alias)

    # Check each match and handle alias cases
    for match in pattern.finditer(tsql_script):
        operation = match.group(1).upper()
        table_part = match.group(2)
        alias_part = match.group(3)
        table_full_name = (table_part + table_name).lower()

        # If the table part or alias part matches the table name or its alias, it's a valid match
        if table_full_name in aliases or (alias_part and alias_part.strip().lower() in aliases):
            start = match.start()
            end = match.end()
            surrounding_text = get_surrounding_text(tsql_script, start, end, 50)
            data.append({
                'search_term': table_name,
                'occurrence': len(data) + 1,  # Incremental occurrence number
                'sql_keyword': operation,
                'surrounding_text': surrounding_text
            })

    return pd.DataFrame(data)

def get_surrounding_text(text, start, end, word_count):
    # Extract surrounding text with a buffer of word_count words on each side
    words = re.split(r'(\s+)', text)  # Split text including whitespace
    word_positions = []
    pos = 0
    for i, word in enumerate(words):
        start_idx = text.find(word, pos)
        end_idx = start_idx + len(word)
        word_positions.append((start_idx, end_idx))
        pos = end_idx

    start_word = max(0, next(i for i, pos in enumerate(word_positions) if pos[0] >= start) - word_count)
    end_word = min(len(words), next(i for i, pos in enumerate(word_positions) if pos[1] >= end) + word_count)

    surrounding_text = ''.join(words[start_word:end_word])
    return surrounding_text

# Example usage
tsql_script = """
CREATE PROCEDURE SampleProcedure
AS
BEGIN
    -- This is a comment line
    INSERT INTO dbo.MyTable (Column1, Column2)
    SELECT Column1, Column2
    FROM AnotherTable
    JOIN dbo.MyTable t ON AnotherTable.ID = t.ID
    DELETE FROM [dbo].[MyTable]
    UPDATE MyTable
    SET Column1 = 'NewValue'
    WHERE Column2 = 'SomeValue'
    TRUNCATE TABLE [dbo].MyTable
    SELECT * FROM dbo.AnotherTable
    UPDATE t SET t.ID = '1' FROM MyTable t
END
"""

table_name = 'MyTable'

results = find_table_operations(tsql_script, table_name)
print(results)



**************************************************************************************************************************************************************
