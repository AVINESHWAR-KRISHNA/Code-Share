import pyodbc
import re
import pandas as pd

# SQL Server connection details (replace with your credentials)
server = 'your_server_name'
database = 'your_database_name'
username = 'your_username'
password = 'your_password'
conn_str = f'DRIVER={{SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}'

def get_procedure_definition(procedure_name):
    """Retrieves the definition of a stored procedure."""
    try:
        with pyodbc.connect(conn_str) as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT definition FROM sys.sql_modules WHERE object_id = OBJECT_ID(?)", procedure_name)
                result = cursor.fetchone()
                return result[0] if result else None
    except Exception as e:
        print(f"Error fetching procedure definition: {e}")
        return None


def extract_dependencies(sql_code, object_name):
    """Extracts dependencies with surrounding text, join types, and object type checks."""
    dependencies = []
    pattern = r'(.{0,50}\b(SELECT|INSERT|UPDATE|DELETE|FROM|JOIN|LEFT\s+JOIN|RIGHT\s+JOIN)\b.{0,50})'
    matches = re.findall(pattern, sql_code, re.IGNORECASE | re.DOTALL)

    for match in matches:
        surrounding_text = match[0].strip()
        operation = match[1].strip().upper()
        object_match = re.search(
            r'\b(FROM|JOIN|LEFT\s+JOIN|RIGHT\s+JOIN)\s+([\w\.]+)',
            surrounding_text,
            re.IGNORECASE,
        )
        if object_match:
            table_name = object_match.group(2).strip()
            column_match = re.search(
                r'\bSELECT\s+(.+?)\s+(FROM|JOIN)', surrounding_text, re.IGNORECASE | re.DOTALL
            )
            columns = (
                [col.strip() for col in column_match.group(1).split(',')]
                if column_match
                else []
            )
            object_type = get_object_type(table_name)  # Get object type from metadata

            dependencies.append(
                {
                    'object_name': object_name,
                    'table_name': table_name,
                    'operation_type': operation,
                    'column_name': ', '.join(columns),
                    'surrounding_text': surrounding_text,
                    "object_type": object_type
                }
            )

    return dependencies

def get_object_type(object_name):
    """Determines the type of a SQL Server object."""
    try:
        with pyodbc.connect(conn_str) as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    """
                    SELECT type_desc 
                    FROM sys.objects 
                    WHERE OBJECT_ID = OBJECT_ID(?)
                    """,
                    object_name,
                )
                result = cursor.fetchone()
                return result[0] if result else "Unknown"
    except Exception as e:
        print(f"Error getting object type: {e}")
        return "Unknown"


def recursive_dependency_analysis(main_procedure_name, visited=None):
    """Performs recursive dependency analysis."""
    visited = visited or set()  # Keep track of visited procedures to avoid cycles
    visited.add(main_procedure_name)

    sql_code = get_procedure_definition(main_procedure_name)
    if not sql_code:
        print(f"Procedure not found or error: {main_procedure_name}")
        return []

    dependencies = extract_dependencies(sql_code)
    all_dependencies = dependencies.copy() 

    for dependency in dependencies:
        if dependency['dependency_type'] == 'Stored Procedure' and dependency['dependency_name'] not in visited:
            all_dependencies.extend(
                recursive_dependency_analysis(dependency['dependency_name'], visited.copy()) 
            )

    return all_dependencies

def generate_dependency_report_df(main_procedure_name):
    """Generates a Pandas DataFrame report."""
    all_dependencies = recursive_dependency_analysis(main_procedure_name)

    df = pd.DataFrame(all_dependencies, columns=[
        'object_name', 'table_name', 'operation_type', 'column_name', 'surrounding_text'
    ])
    return df

def generate_dependency_report(main_procedure_name):
    """Generates a dependency report for the given stored procedure."""
    all_dependencies = recursive_dependency_analysis(main_procedure_name)

    print(f"Dependency Report for: {main_procedure_name}\n")
    for dependency in all_dependencies:
        print(f"  - Dependency: {dependency['dependency_name']}")
        print(f"    Type: {dependency['dependency_type']}")
        print(f"    Operation: {dependency['operation']}")
        if dependency['columns']:
            print(f"    Columns: {', '.join(dependency['columns'])}")
        print("-" * 40)

if __name__ == "__main__":
    main_procedure = 'your_main_stored_procedure' 
    df_report = generate_dependency_report_df(main_procedure)
    generate_dependency_report(main_procedure)
    print(df_report) 
